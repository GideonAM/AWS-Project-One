name: Deploy Spring Boot to AWS ECR and Trigger CodeDeploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - 'appspec-template.yaml'
      - '.github/workflows/push-to-ecr.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set environment name
        id: set-env-name
        run: |
          echo "ENVIRONMENT_NAME=app" >> $GITHUB_ENV

      - name: Download and update task definition
        id: register-task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecs describe-task-definition --task-definition ${ENVIRONMENT_NAME}-task --query "taskDefinition" > task-definition.json

          jq ".containerDefinitions[0].image = \"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"" task-definition.json > new-task-definition.json

          NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
            --family ${ENVIRONMENT_NAME}-task \
            --execution-role-arn $(jq -r '.executionRoleArn' task-definition.json) \
            --network-mode $(jq -r '.networkMode' task-definition.json) \
            --container-definitions $(jq -c '.containerDefinitions' new-task-definition.json) \
            --requires-compatibilities $(jq -r '.requiresCompatibilities[]' task-definition.json) \
            --cpu $(jq -r '.cpu' task-definition.json) \
            --memory $(jq -r '.memory' task-definition.json) \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          
          echo "new_task_definition=$NEW_TASK_DEFINITION" >> $GITHUB_OUTPUT

      - name: Generate AppSpec file
        id: generate-appspec
        env:
          TASK_DEFINITION: ${{ steps.register-task-def.outputs.new_task_definition }}
          run: |
            cat << EOF > appspec.yaml
              version: 0.0
              Resources:
                - TargetService:
                    Type: AWS::ECS::Service
                    Properties:
                      TaskDefinition: "${{ steps.register-task-def.outputs.new_task_definition }}"
                      LoadBalancerInfo:
                        ContainerName: app-container
                        ContainerPort: 8080
              EOF
            echo "Appspec file generated:"
            cat appspec.yaml

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name "${ENVIRONMENT_NAME}-deploy-app" \
            --deployment-group-name "${ENVIRONMENT_NAME}-deploy-group" \
            --revision "revisionType=AppSpecContent,appSpecContent={content=$(cat appspec.yaml | base64 -w 0)}" \
            --description "Deployment triggered by GitHub Actions for commit ${{ github.sha }}" \
            --region "${{ secrets.AWS_REGION }}"