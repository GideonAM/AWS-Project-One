name: Deploy Spring Boot to AWS ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - 'appspec.yml'
      - '.github/workflows/push-to-ecr.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Trigger CodeDeploy Deployment
        run: |
          # Get task definition ARN
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "${{ secrets.TASK_DEFINITION_FAMILY }}" --query "taskDefinition.taskDefinitionArn" --output text)
          
          # Print for debugging
          echo "Using task definition: $TASK_DEFINITION"
          
          # Create the appspec file with proper indentation
          cat << 'EOF' > deployment-appspec.yml
version: 0.0
Resources:
  - TargetService:
      Type: AWS::ECS::Service
      Properties:
        TaskDefinition: ${TASK_DEFINITION}
        LoadBalancerInfo:
          ContainerName: "dev-container"
          ContainerPort: 8080
        PlatformVersion: "LATEST"
  EOF
  
  # Verify the appspec content
  echo "Generated appspec.yml content:"
  cat deployment-appspec.yml
  
  # Deploy using the generated appspec
  aws deploy create-deployment \
  --application-name "${{ secrets.CODEDEPLOY_APPLICATION }}" \
  --deployment-group-name "${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}" \
  --revision "revisionType=AppSpecContent,appSpecContent={content=$(cat deployment-appspec.yml | base64 -w 0)}" \
  --description "Deployment triggered by GitHub Actions" \
  --region "${{ secrets.AWS_REGION }}"