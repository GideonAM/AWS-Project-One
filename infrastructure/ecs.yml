AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Cluster and CodeDeploy for Blue/Green Deployment'

Parameters:
  EnvironmentName:
    Description: Environment name prefix
    Type: String
    Default: dev

  ImageURI:
    Description: URI of the ECR image to deploy
    Type: String
    Default: 586794454345.dkr.ecr.us-east-1.amazonaws.com/aws-project-one:latest

  ContainerPort:
    Description: Container port for the application
    Type: Number
    Default: 8080

  TaskCPU:
    Description: CPU units for the ECS task
    Type: String
    Default: '256'

  TaskMemory:
    Description: Memory for the ECS task
    Type: String
    Default: '512'

  DesiredCount:
    Description: Desired number of containers
    Type: Number
    Default: 2

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/app/${EnvironmentName}/*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-task
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-container
          Image: !Ref ImageURI
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: AWS_ACCESS_KEY
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/aws-access-key}}'
            - Name: AWS_SECRET_KEY
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/aws-secret-key}}'
            - Name: AWS_REGION
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/aws-region}}'
            - Name: cloud.aws.stack.auto
              Value: 'false'
            - Name: S3_BUCKET_NAME
              Value: !Sub '{{resolve:ssm:/app/${EnvironmentName}/s3-bucket-name}}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-service
      RetentionInDays: 30

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets: !Split
        - ","
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnets"
      SecurityGroups:
        - !Ref ALBSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ALB
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-blue
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-green
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentController:
        Type: CODE_DEPLOY
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${EnvironmentName}-ECSSecurityGroup"
          Subnets: !Split
            - ","
            - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnets"
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-container
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroupBlue

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-deploy-app
      ComputePlatform: ECS

DeploymentGroup:
  Type: AWS::CodeDeploy::DeploymentGroup
  Properties:
    ApplicationName: !Ref CodeDeployApplication
    DeploymentGroupName: !Sub ${EnvironmentName}-deploy-group
    DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
    ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
    BlueGreenDeploymentConfiguration:
      DeploymentReadyOption:
        ActionOnTimeout: CONTINUE_DEPLOYMENT
        WaitTimeInMinutes: 0
      TerminateBlueInstancesOnDeploymentSuccess:
        Action: TERMINATE
        TerminationWaitTimeInMinutes: 5
    LoadBalancerInfo:
      TargetGroupPairInfoList:
        - ProdTrafficRoute:
            ListenerArns:
              - !Ref ALBListener
          TargetGroups:
            - Name: !GetAtt TargetGroupBlue.TargetGroupName
            - Name: !GetAtt TargetGroupGreen.TargetGroupName
    ECSServices:
      - ClusterName: !Ref ECSCluster
        ServiceName: !GetAtt ECSService.Name

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${EnvironmentName}-ECSCluster"

  ServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${EnvironmentName}-ECSService"

  LoadBalancerDNS:
    Description: DNS of the Load Balancer
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub "${EnvironmentName}-LoadBalancerDNS"

  CodeDeployApplication:
    Description: CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${EnvironmentName}-CodeDeployApplication"

  CodeDeployDeploymentGroup:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref DeploymentGroup
    Export:
      Name: !Sub "${EnvironmentName}-CodeDeployDeploymentGroup"